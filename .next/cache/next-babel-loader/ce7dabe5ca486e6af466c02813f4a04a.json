{"ast":null,"code":"import { GoogleSpreadsheet } from 'google-spreadsheet';\nimport credentials from '../../credentials.json';\nimport moment from 'moment';\nconst doc = new GoogleSpreadsheet(process.env.DOC_ID);\n\nconst newcupom = () => {\n  const val = parseInt(moment().format('DDMMYYYYHHmmSSS')).toString(16);\n  return val.substr(0, 4) + '-' + val.substr(4, 4) + '-' + val.substr(8, 4);\n};\n\nexport default (async (req, res) => {\n  try {\n    //  await doc.useServiceAccountAuth(credentials)\n    await doc.useServiceAccountAuth({\n      client_email: process.env.SHEET_CLIENT,\n      private_key: process.env.SHEET_KEY\n    });\n    await doc.loadInfo();\n    const sheet = doc.sheetsByIndex[2];\n    const data = JSON.parse(req.body);\n    const sheetConfig = doc.sheetsByIndex[1];\n    await sheetConfig.loadCells('A3:B3');\n    const celpromo = sheetConfig.getCell(2, 0);\n    const celltexto = sheetConfig.getCell(2, 1);\n    let Cupom = '';\n    let Promo = '';\n\n    if (celpromo.value === 'VERDADEIRO') {\n      Cupom = newcupom();\n      Promo = celltexto.value;\n    }\n\n    await sheet.addRow({\n      Nome: data.Nome,\n      Email: data.Email,\n      Whatsapp: data.Whatsapp,\n      'Data': moment().format('DD/MM/YYYY HH:mm a'),\n      Nota: data.Nota,\n      Cupom,\n      Promo,\n      Recomenda: data.Recomenda\n    });\n    res.end(JSON.stringify({\n      newcupom: Cupom !== '',\n      Cupom,\n      Promo\n    }));\n  } catch (err) {\n    res.end('error');\n  }\n}); //JSON.parse transforma para objeto","map":{"version":3,"sources":["H:/Projetos/palpit-box/pages/api/save.js"],"names":["GoogleSpreadsheet","credentials","moment","doc","process","env","DOC_ID","newcupom","val","parseInt","format","toString","substr","req","res","useServiceAccountAuth","client_email","SHEET_CLIENT","private_key","SHEET_KEY","loadInfo","sheet","sheetsByIndex","data","JSON","parse","body","sheetConfig","loadCells","celpromo","getCell","celltexto","Cupom","Promo","value","addRow","Nome","Email","Whatsapp","Nota","Recomenda","end","stringify","err"],"mappings":"AAAA,SAAQA,iBAAR,QAAgC,oBAAhC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,MAAMC,GAAG,GAAE,IAAIH,iBAAJ,CAAsBI,OAAO,CAACC,GAAR,CAAYC,MAAlC,CAAX;;AAEA,MAAMC,QAAQ,GAAG,MAAK;AAClB,QAAMC,GAAG,GAAGC,QAAQ,CAACP,MAAM,GAAGQ,MAAT,CAAgB,iBAAhB,CAAD,CAAR,CAA6CC,QAA7C,CAAsD,EAAtD,CAAZ;AACA,SAAOH,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAa,CAAb,IAAkB,GAAlB,GAAwBJ,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAa,CAAb,CAAxB,GAA0C,GAA1C,GAAgDJ,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAa,CAAb,CAAvD;AACH,CAHD;;AAIA,gBAAe,OAAMC,GAAN,EAAUC,GAAV,KAAiB;AAC5B,MAAG;AACD;AACE,UAAMX,GAAG,CAACY,qBAAJ,CAA0B;AAC5BC,MAAAA,YAAY,EAAEZ,OAAO,CAACC,GAAR,CAAYY,YADE;AAE5BC,MAAAA,WAAW,EAAEd,OAAO,CAACC,GAAR,CAAYc;AAFG,KAA1B,CAAN;AAIA,UAAMhB,GAAG,CAACiB,QAAJ,EAAN;AACA,UAAMC,KAAK,GAAElB,GAAG,CAACmB,aAAJ,CAAkB,CAAlB,CAAb;AACA,UAAMC,IAAI,GAAEC,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACa,IAAf,CAAZ;AAEA,UAAMC,WAAW,GAAGxB,GAAG,CAACmB,aAAJ,CAAkB,CAAlB,CAApB;AACA,UAAMK,WAAW,CAACC,SAAZ,CAAsB,OAAtB,CAAN;AAEA,UAAMC,QAAQ,GAAGF,WAAW,CAACG,OAAZ,CAAoB,CAApB,EAAuB,CAAvB,CAAjB;AACA,UAAMC,SAAS,GAAGJ,WAAW,CAACG,OAAZ,CAAoB,CAApB,EAAsB,CAAtB,CAAlB;AAEA,QAAIE,KAAK,GAAE,EAAX;AACA,QAAIC,KAAK,GAAE,EAAX;;AACA,QAAIJ,QAAQ,CAACK,KAAT,KAAmB,YAAvB,EAAoC;AAChCF,MAAAA,KAAK,GAAGzB,QAAQ,EAAhB;AACA0B,MAAAA,KAAK,GAAGF,SAAS,CAACG,KAAlB;AACH;;AAED,UAAMb,KAAK,CAACc,MAAN,CAAa;AACfC,MAAAA,IAAI,EAAEb,IAAI,CAACa,IADI;AAEfC,MAAAA,KAAK,EAAEd,IAAI,CAACc,KAFG;AAGfC,MAAAA,QAAQ,EAACf,IAAI,CAACe,QAHC;AAIf,cAAQpC,MAAM,GAAGQ,MAAT,CAAgB,oBAAhB,CAJO;AAKf6B,MAAAA,IAAI,EAAGhB,IAAI,CAACgB,IALG;AAMfP,MAAAA,KANe;AAOfC,MAAAA,KAPe;AAQfO,MAAAA,SAAS,EAAEjB,IAAI,CAACiB;AARD,KAAb,CAAN;AAUA1B,IAAAA,GAAG,CAAC2B,GAAJ,CAAQjB,IAAI,CAACkB,SAAL,CAAe;AACnBnC,MAAAA,QAAQ,EAAGyB,KAAK,KAAK,EADF;AAEnBA,MAAAA,KAFmB;AAGnBC,MAAAA;AAHmB,KAAf,CAAR;AAKH,GAtCD,CAsCC,OAAMU,GAAN,EAAU;AACP7B,IAAAA,GAAG,CAAC2B,GAAJ,CAAQ,OAAR;AACH;AACJ,CA1CD,E,CA6CA","sourcesContent":["import {GoogleSpreadsheet} from 'google-spreadsheet'\r\nimport credentials from '../../credentials.json'\r\nimport moment from 'moment'\r\n\r\n\r\nconst doc= new GoogleSpreadsheet(process.env.DOC_ID)\r\n\r\nconst newcupom = () =>{\r\n    const val = parseInt(moment().format('DDMMYYYYHHmmSSS')).toString(16);\r\n    return val.substr(0,4) + '-' + val.substr(4,4) + '-' + val.substr(8,4)\r\n}\r\nexport default async(req,res) =>{\r\n    try{\r\n      //  await doc.useServiceAccountAuth(credentials)\r\n        await doc.useServiceAccountAuth({\r\n            client_email: process.env.SHEET_CLIENT,\r\n            private_key: process.env.SHEET_KEY\r\n        })\r\n        await doc.loadInfo()\r\n        const sheet =doc.sheetsByIndex[2]\r\n        const data =JSON.parse(req.body)\r\n\r\n        const sheetConfig = doc.sheetsByIndex[1]\r\n        await sheetConfig.loadCells('A3:B3')\r\n\r\n        const celpromo = sheetConfig.getCell(2 ,0)       \r\n        const celltexto = sheetConfig.getCell(2,1)\r\n\r\n        let Cupom= ''\r\n        let Promo= ''\r\n        if (celpromo.value === 'VERDADEIRO'){\r\n            Cupom = newcupom()\r\n            Promo = celltexto.value\r\n        }\r\n\r\n        await sheet.addRow({\r\n            Nome :data.Nome,\r\n            Email: data.Email,\r\n            Whatsapp:data.Whatsapp,\r\n            'Data': moment().format('DD/MM/YYYY HH:mm a'),\r\n            Nota : data.Nota,\r\n            Cupom,\r\n            Promo,\r\n            Recomenda: data.Recomenda\r\n        })        \r\n        res.end(JSON.stringify({\r\n            newcupom : Cupom !== '',\r\n            Cupom,\r\n            Promo\r\n        }))\r\n    }catch(err){\r\n        res.end('error') \r\n    }\r\n}\r\n\r\n\r\n//JSON.parse transforma para objeto "]},"metadata":{},"sourceType":"module"}